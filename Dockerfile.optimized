# 多阶段构建优化版 Dockerfile
# 使用最新的 Node.js Alpine 镜像

# ===== 基础镜像 =====
FROM node:18-alpine AS base

# 安装必要的系统依赖
RUN apk add --no-cache \
    libc6-compat \
    dumb-init

# 设置工作目录
WORKDIR /app

# 设置 pnpm
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# ===== 依赖安装阶段 =====
FROM base AS deps

# 复制依赖文件
COPY package.json pnpm-lock.yaml* ./

# 安装依赖（包括 devDependencies 用于构建）
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

# ===== 构建阶段 =====
FROM base AS builder

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules

# 复制源代码
COPY . .

# 设置环境变量
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# 生成 Prisma Client
RUN pnpm exec prisma generate

# 构建应用
RUN pnpm build

# ===== 生产运行阶段 =====
FROM base AS runner

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 创建非 root 用户
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# 设置工作目录
WORKDIR /app

# 复制必要的文件
COPY --from=builder /app/public ./public

# 创建并设置目录权限
RUN mkdir -p ./public/uploads/icons ./logs && \
    chown -R nextjs:nodejs ./public/uploads ./logs

# 复制构建产物和依赖
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# 安装生产依赖（仅运行时需要的）
COPY --from=deps /app/node_modules ./node_modules
RUN pnpm prune --prod

# 生成 Prisma Client（生产环境）
RUN pnpm exec prisma generate

# 切换到非 root 用户
USER nextjs

# 暴露端口
EXPOSE 3000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node healthcheck.js

# 使用 dumb-init 作为 PID 1
ENTRYPOINT ["dumb-init", "--"]

# 启动应用
CMD ["node", "server.js"]
